/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Cron;

use Runtime.lib;
use Runtime.ORM.Record;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.Task.CronTask;
use Runtime.Task.CronTimer;
use Runtime.Task.TaskMethod;
use Runtime.Task.Tasks;


struct Cron extends Record
{
	@StringType{}
	string command = "";
	
	
	@BigIntType{}
	int last_run = 0;
	
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "cron";
	
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["command"],
		},
	];
	
	
	
	/**
	 * Update last run
	 */
	static async TaskMethod updateLastRun(TaskMethod task, int last_run)
	{
		await static::save
		{
			"command": task.getCommand(),
			"last_run": last_run,
		};
		
		task <= last_run <= last_run;
		
		return task;
	}
	
	
	
	/**
	 * Returns cron tasks
	 */
	static async Collection<TaskMethod> getCronTasks()
	{
		/* Get tasks */
		Collection<TaskMethod> tasks = Tasks::getTaskMethods()
		|> .filter
		(
			lib::or([
				lib::isInstance(classof CronTask),
				lib::isInstance(classof CronTimer),
			])
		);
		
		/* Get records */
		Collection<Cron> records = static::select() |> await .all();
		
		/* Add last run */
		tasks = tasks.map
		(
			TaskMethod (TaskMethod task) use (records)
			{
				Cron record = records.findItem( lib::equalAttr("command", task.getCommand()) );
				if (record)
				{
					task <= last_run <= record.last_run;
				}
				return task;
			}
		);
		
		return tasks;
	}
	
	
}